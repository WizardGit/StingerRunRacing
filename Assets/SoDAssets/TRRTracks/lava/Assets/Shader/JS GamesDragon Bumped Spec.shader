Shader "JS Games/Dragon Bumped Spec" {
	Properties {
		_PrimaryColor ("Primary Color", Vector) = (1,1,1,1)
		_SecondaryColor ("Secondary Color", Vector) = (1,1,1,1)
		_TertiaryColor ("Tertiary Color", Vector) = (1,1,1,1)
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		[NoScaleOffset] _ColorMask ("ColorMask", 2D) = "white" {}
		[NoScaleOffset] _BumpMap ("Normal", 2D) = "bump" {}
		_BumpStrength ("Normal Intensity", Range(0, 5)) = 1
		_SpecColor ("Specular Color", Vector) = (0.5,0.5,0.5,1)
		_SpecularMap ("Specular (R)", 2D) = "white" {}
		_Glossiness ("Smoothness", Range(0.01, 1)) = 0.5
		[NoScaleOffset] _EmissiveMap ("Emissive", 2D) = "white" {}
		[HDR] _EmissiveColor ("Emissive Color", Vector) = (0,0,0,1)
		_DecalMap ("Decal", 2D) = "white" {}
		_DecalOpacity ("Decal Opacity", Range(0, 1)) = 0
		_MKGlowColor ("Glow Color", Vector) = (1,1,1,1)
		_MKGlowPower ("Glow Power", Range(0, 2.5)) = 0
		_MKGlowTex ("Glow Texture", 2D) = "black" {}
		_MKGlowTexColor ("Glow Texture Color", Vector) = (1,1,1,1)
		_MKGlowTexStrength ("Glow Texture Strength ", Range(0, 10)) = 0
	}
	SubShader {
		LOD 200
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 57593
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3 = vec4(u_xlat20) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2 = vec4(u_xlat16) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat3 = vec4(u_xlat13) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.ywzx * u_xlat3;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat16 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat13 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[3];
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat15 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat8 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat21 * u_xlat8 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat21 = u_xlat21 + (-u_xlat1.x);
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat1.x;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat21 = u_xlat21 + u_xlat1.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.xy = u_xlat3.xy * vec2(_BumpStrength);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat7 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat4.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat2.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat21 = u_xlat6.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat22) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w;
					    u_xlat1.y = vs_TEXCOORD3.w;
					    u_xlat1.z = vs_TEXCOORD4.w;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.x = max(u_xlat1.x, 0.0);
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = u_xlat3.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat14, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat21 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat7.x = max(u_xlat22, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat14 = _Glossiness * 128.0;
					    u_xlat7.x = u_xlat7.x * u_xlat14;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat7.x = u_xlat7.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat21 = (-u_xlat14) + u_xlat21;
					    u_xlat14 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat14;
					    u_xlat14 = u_xlat14 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat14 * u_xlat21 + u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat14) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.yyy * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat4.xyw = (-u_xlat3.xyz) + _TertiaryColor.xyz;
					    u_xlat3.xyz = u_xlat4.zzz * u_xlat4.xyw + u_xlat3.xyz;
					    u_xlat4 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat22 = u_xlat6.w * _DecalOpacity;
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat4.xyz * _MKGlowTexColor.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat10.x = (-u_xlat5.x) + u_xlat16;
					    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat5.x = (-u_xlat5.x) + 1.0;
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat5.x = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat5.xxx;
					    u_xlat0.xzw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = max(u_xlat0.xzw, unity_ShadowColor.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + (-u_xlat0.xzw);
					    u_xlat0.xyz = _LightShadowData.xxx * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1;
						vec4 _LightColor0;
						vec4 unused_0_3;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_9[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[9];
						vec4 unity_ShadowColor;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat10, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.yzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat0.yzw);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat16 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.x = vs_TEXCOORD2.w;
					    u_xlat2.y = vs_TEXCOORD3.w;
					    u_xlat2.z = vs_TEXCOORD4.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat1.x) + u_xlat16;
					    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x + u_xlat2.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, unity_ShadowColor.xyz);
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _LightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = min(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat1.xyz + _PrimaryColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SecondaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat2.xyw = (-u_xlat1.xyz) + _TertiaryColor.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat2.xyw + u_xlat1.xyz;
					    u_xlat2 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat4 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat15 = u_xlat4.w * _DecalOpacity;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat2 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz * _MKGlowTexColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 200
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 119629
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    u_xlat2 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat2.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat15));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = log2(u_xlat12);
					    u_xlat5.x = _Glossiness * 128.0;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat5.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb15 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat2.w * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat15 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpStrength);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat4.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat16 = log2(u_xlat16);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12.x = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat12.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat12.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat12.xy;
					    u_xlat12.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat12.xy;
					    u_xlat12.xy = u_xlat12.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					vec2 u_xlat28;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat34 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat14.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat34 = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat34 = min(u_xlat34, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat4.z = sqrt(u_xlat34);
					    u_xlat4.xy = u_xlat14.xy * vec2(_BumpStrength);
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat4 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat4 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToLight[3];
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat35 = sqrt(u_xlat35);
					    u_xlat35 = (-u_xlat34) + u_xlat35;
					    u_xlat34 = unity_ShadowFadeCenterAndType.w * u_xlat35 + u_xlat34;
					    u_xlat34 = u_xlat34 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlatb35 = u_xlat34<0.99000001;
					    if(u_xlatb35){
					        u_xlat5 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat5 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat5;
					        u_xlat5 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat5;
					        u_xlat5 = u_xlat5 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
					        u_xlat6.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					        u_xlat6.xy = floor(u_xlat6.xy);
					        u_xlat5.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat6.xy);
					        u_xlat7 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat8.xw = u_xlat7.xz * u_xlat7.xz;
					        u_xlat28.xy = u_xlat8.xw * vec2(0.5, 0.5) + (-u_xlat5.xy);
					        u_xlat7.xz = (-u_xlat5.xy) + vec2(1.0, 1.0);
					        u_xlat9.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat7.xz = (-u_xlat9.xy) * u_xlat9.xy + u_xlat7.xz;
					        u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					        u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat7.yw;
					        u_xlat9.x = u_xlat28.x;
					        u_xlat9.y = u_xlat7.x;
					        u_xlat9.z = u_xlat5.x;
					        u_xlat9.w = u_xlat8.x;
					        u_xlat9 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8.x = u_xlat28.y;
					        u_xlat8.y = u_xlat7.z;
					        u_xlat8.z = u_xlat5.y;
					        u_xlat7 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					        u_xlat8 = u_xlat9.ywyw + u_xlat9.xzxz;
					        u_xlat10 = u_xlat7.yyww + u_xlat7.xxzz;
					        u_xlat5.xy = u_xlat9.yw / u_xlat8.zw;
					        u_xlat5.xy = u_xlat5.xy + vec2(-1.5, 0.5);
					        u_xlat28.xy = u_xlat7.yw / u_xlat10.yw;
					        u_xlat28.xy = u_xlat28.xy + vec2(-1.5, 0.5);
					        u_xlat7.xy = u_xlat5.xy * _ShadowMapTexture_TexelSize.xx;
					        u_xlat7.zw = u_xlat28.xy * _ShadowMapTexture_TexelSize.yy;
					        u_xlat8 = u_xlat8 * u_xlat10;
					        u_xlat9 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xzyz;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat5.z);
					        u_xlat35 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat9.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat8.y;
					        u_xlat35 = u_xlat8.x * u_xlat35 + u_xlat5.x;
					        u_xlat6 = u_xlat6.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.xwyw;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat35 = u_xlat8.z * u_xlat5.x + u_xlat35;
					        vec3 txVec3 = vec3(u_xlat6.zw,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat35 = u_xlat8.w * u_xlat5.x + u_xlat35;
					        u_xlat5.x = (-_LightShadowData.x) + 1.0;
					        u_xlat35 = u_xlat35 * u_xlat5.x + _LightShadowData.x;
					    } else {
					        u_xlat35 = 1.0;
					    }
					    u_xlat5.x = (-u_xlat35) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat5.x + u_xlat35;
					    u_xlatb35 = 0.0<u_xlat4.z;
					    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);
					    u_xlat5.xy = u_xlat4.xy / u_xlat4.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlat35 = u_xlat35 * u_xlat5.w;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat4.xx);
					    u_xlat35 = u_xlat35 * u_xlat4.x;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat14.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat14.xyz);
					    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat14.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat34) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat14.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat14.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat22 = _Glossiness * 128.0;
					    u_xlat11.x = log2(u_xlat0.y);
					    u_xlat11.x = u_xlat11.x * u_xlat22;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat3.x * u_xlat11.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat11.xyz;
					    u_xlat33 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * _ProjectionParams.z;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = u_xlat33 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb12 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat2.w * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 unused_0_3[4];
						vec4 _ShadowMapTexture_TexelSize;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_13;
						vec4 _MKGlowTexColor;
						vec4 unused_0_15[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD5.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat0 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD5.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<u_xlat1.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat3.w * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat1.x;
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_10;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat6.x = log2(u_xlat0.y);
					    u_xlat12 = _Glossiness * 128.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat6.x * u_xlat2.x;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = (-u_xlat12) + u_xlat18;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat12 = u_xlat12 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat12 = u_xlat12 * u_xlat1.w;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat26));
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat12));
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat1.x = (-u_xlat12) + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat1.x + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyw) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat2.zzz * u_xlat3.xyz + u_xlat2.xyw;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat25 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat3 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat11.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat25 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat4.z = sqrt(u_xlat25);
					    u_xlat4.xy = u_xlat11.xy * vec2(_BumpStrength);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat5.xyz);
					    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat26 = sqrt(u_xlat26);
					    u_xlat26 = (-u_xlat25) + u_xlat26;
					    u_xlat25 = unity_ShadowFadeCenterAndType.w * u_xlat26 + u_xlat25;
					    u_xlat25 = u_xlat25 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlatb26 = u_xlat25<0.99000001;
					    if(u_xlatb26){
					        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					        u_xlat26 = max(abs(u_xlat5.y), abs(u_xlat5.x));
					        u_xlat26 = max(abs(u_xlat5.z), u_xlat26);
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.z);
					        u_xlat26 = max(u_xlat26, 9.99999975e-06);
					        u_xlat26 = u_xlat26 * _LightProjectionParams.w;
					        u_xlat26 = _LightProjectionParams.y / u_xlat26;
					        u_xlat26 = u_xlat26 + (-_LightProjectionParams.x);
					        u_xlat26 = (-u_xlat26) + 1.0;
					        u_xlat6.xyz = u_xlat5.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat26);
					        u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        vec4 txVec1 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat7.xyz = u_xlat5.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        vec4 txVec2 = vec4(u_xlat7.xyz,u_xlat26);
					        u_xlat6.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat5.xyz = u_xlat5.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        vec4 txVec3 = vec4(u_xlat5.xyz,u_xlat26);
					        u_xlat6.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat26 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
					        u_xlat28 = (-_LightShadowData.x) + 1.0;
					        u_xlat26 = u_xlat26 * u_xlat28 + _LightShadowData.x;
					    } else {
					        u_xlat26 = 1.0;
					    }
					    u_xlat28 = (-u_xlat26) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat28 + u_xlat26;
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat26));
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat26 = u_xlat4.w * u_xlat5.x;
					    u_xlat25 = u_xlat25 * u_xlat26;
					    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat11.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat11.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat11.xyz);
					    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat11.xyz = vec3(u_xlat26) * u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat11.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat11.xyz, u_xlat1.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat16 = _Glossiness * 128.0;
					    u_xlat8.x = log2(u_xlat0.y);
					    u_xlat8.x = u_xlat8.x * u_xlat16;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat3.x * u_xlat8.x;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * _SpecColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat8.xyz;
					    u_xlat24 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat12, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6 = _Glossiness * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat6 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = (-u_xlat6) + u_xlat12;
					    u_xlat6 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat6;
					    u_xlat6 = u_xlat6 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat12 = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlat12 = max(abs(u_xlat1.z), u_xlat12);
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.z);
					    u_xlat12 = max(u_xlat12, 9.99999975e-06);
					    u_xlat12 = u_xlat12 * _LightProjectionParams.w;
					    u_xlat12 = _LightProjectionParams.y / u_xlat12;
					    u_xlat12 = u_xlat12 + (-_LightProjectionParams.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat12);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _LightShadowData.x;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat12 = u_xlat1.w * u_xlat2.x;
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat19 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec4 unused_0_11;
						vec4 _MKGlowTexColor;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[10];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat18);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat18);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat1.x = unity_MatrixV[0].z;
					    u_xlat1.y = unity_MatrixV[1].z;
					    u_xlat1.z = unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
					    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat12;
					    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat3.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _SpecColor.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = u_xlat4.w * u_xlat4.x;
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_BumpStrength);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat4.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat2.x = _Glossiness * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat2 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat2.xyz + _PrimaryColor.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + _SecondaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat3.xyw = (-u_xlat2.xyz) + _TertiaryColor.xyz;
					    u_xlat2.xyz = u_xlat3.zzz * u_xlat3.xyw + u_xlat2.xyz;
					    u_xlat3 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat5 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat18 = u_xlat5.w * _DecalOpacity;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat3 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat3.xyz = u_xlat3.xyz * _MKGlowTexColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 200
			Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
			GpuProgramID 178825
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BumpStrength;
						float _Glossiness;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat4, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Glossiness;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BumpStrength;
						float _Glossiness;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat4, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Glossiness;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _BumpStrength;
						float _Glossiness;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _BumpMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat4, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Glossiness;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 200
			Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
			ZWrite Off
			GpuProgramID 230209
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD6 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD6 = u_xlat2.z;
					    vs_TEXCOORD3.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat2.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat2.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat3 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat3 * (-u_xlat0.x);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat5.xyz = (-u_xlat2.xyz) + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat2 = log2(u_xlat2);
					    u_xlat1.x = u_xlat1.x * (-u_xlat2.w);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_9[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat5.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat5.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat5.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_10[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat6.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat2.w;
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6.x = u_xlat4.w * unity_Lightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 200
			Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
			GpuProgramID 266974
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat1.x;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _DetailTex_ST;
						vec4 _DecalMap_ST;
						vec4 _MKGlowTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DecalMap_ST.xy + _DecalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MKGlowTex_ST.xy + _MKGlowTex_ST.zw;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat2.x;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    SV_Target3.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    SV_Target3.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat0.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = u_xlat0.xy * vec2(_BumpStrength);
					    u_xlat0.x = min(u_xlat8, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    SV_Target3.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_11[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat9, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _EmissiveColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat12 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_1[2];
						vec4 _SpecColor;
						vec4 _PrimaryColor;
						vec4 _SecondaryColor;
						vec4 _TertiaryColor;
						float _BumpStrength;
						float _Glossiness;
						float _DecalOpacity;
						float _MKGlowTexStrength;
						vec3 _EmissiveColor;
						vec4 _MKGlowTexColor;
						vec4 unused_0_12[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					uniform  sampler2D _ColorMask;
					uniform  sampler2D _DetailTex;
					uniform  sampler2D _DecalMap;
					uniform  sampler2D _MKGlowTex;
					uniform  sampler2D _SpecularMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _EmissiveMap;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xyz = (-_PrimaryColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_ColorMask, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _PrimaryColor.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _SecondaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat1.xyw = (-u_xlat0.xyz) + _TertiaryColor.xyz;
					    u_xlat0.xyz = u_xlat1.zzz * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_DecalMap, vs_TEXCOORD0.zw);
					    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = u_xlat3.w * _DecalOpacity;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1 = texture(_MKGlowTex, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _MKGlowTexColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_MKGlowTexStrength, _MKGlowTexStrength, _MKGlowTexStrength)) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat1 = texture(_SpecularMap, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.w = _Glossiness;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat2.xy = u_xlat1.xy * vec2(_BumpStrength);
					    u_xlat1.x = min(u_xlat13, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat1.x);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.w = 1.0;
					    SV_Target2 = u_xlat1 * vec4(0.5, 0.5, 0.5, 1.0) + vec4(0.5, 0.5, 0.5, 0.0);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat4 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat5.x = dot(unity_SHBr, u_xlat4);
					    u_xlat5.y = dot(unity_SHBg, u_xlat4);
					    u_xlat5.z = dot(unity_SHBb, u_xlat4);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat19 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_EmissiveMap, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) * _EmissiveColor.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _EmissiveColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "JS Games/Mobile/Dragon"
}