Shader "AQUAS/Desktop and Web/Double-Sided/Triple-Textured Bumpy" {
	Properties {
		[NoScaleOffset] _SmallWavesTexture ("Small Waves Texture", 2D) = "bump" {}
		_SmallWavesTiling ("Small Waves Tiling", Float) = 1
		_SmallWavesSpeed ("Small Waves Speed", Float) = -20
		_SmallWaveRrefraction ("Small Wave Rrefraction", Range(0, 3)) = 2.2
		[NoScaleOffset] _MediumWavesTexture ("Medium Waves Texture", 2D) = "bump" {}
		_MediumWavesTiling ("Medium Waves Tiling", Float) = 0.5
		_MediumWavesSpeed ("Medium Waves Speed", Float) = 40
		_MediumWaveRefraction ("Medium Wave Refraction", Range(0, 3)) = 1.8
		[NoScaleOffset] _LargeWavesTexture ("Large Waves Texture", 2D) = "bump" {}
		_LargeWavesTiling ("Large Waves Tiling", Float) = 0.3
		_LargeWavesSpeed ("Large Waves Speed", Float) = -40
		_LargeWaveRefraction ("Large Wave Refraction", Range(0, 3)) = 1.5
		_MainColor ("Main Color", Vector) = (0,0.4627451,1,1)
		_DeepWaterColor ("Deep Water Color", Vector) = (0,0.3411765,0.6235294,1)
		_Fade ("Fade", Float) = 1.45
		_Density ("Density", Range(0, 10)) = 1.74
		_DepthTransparency ("Depth Transparency", Float) = 1.5
		_ShoreFade ("Shore Fade", Float) = 0.3
		_ShoreTransparency ("Shore Transparency", Float) = 0.04
		_WaveBlend ("Wave Blend", Float) = 0.77
		_WaveFade ("Wave Fade", Float) = 1.19
		[MaterialToggle] _EnableReflections ("Enable Reflections", Float) = 0
		_ReflectionIntensity ("Reflection Intensity", Range(0, 1)) = 0.5
		_Distortion ("Distortion", Range(0, 2)) = 0.3
		_Specular ("Specular", Float) = 1
		_Gloss ("Gloss", Range(0, 1)) = 0.55
		_LightWrapping ("Light Wrapping", Float) = 0
		[HideInInspector] _ReflectionTex ("Reflection Tex", 2D) = "white" {}
		[NoScaleOffset] _FoamTexture ("Foam Texture", 2D) = "white" {}
		_FoamTiling ("Foam Tiling", Float) = 3
		_FoamBlend ("Foam Blend", Float) = 0.15
		_FoamVisibility ("Foam Visibility", Range(0, 1)) = 0.3
		_FoamIntensity ("Foam Intensity", Float) = 10
		_FoamContrast ("Foam Contrast", Range(0, 0.5)) = 0.25
		_FoamColor ("Foam Color", Vector) = (0.3823529,0.3879758,0.3879758,1)
		_FoamSpeed ("Foam Speed", Float) = 120
		_FoamDistFalloff ("Foam Dist. Falloff", Float) = 16
		_FoamDistFade ("Foam Dist. Fade", Float) = 9.5
		[MaterialToggle] _UnderwaterMode ("Underwater Mode", Float) = 0
		[MaterialToggle] _EnableCustomFog ("Enable Custom Fog", Float) = 3.654843
		_FogColor ("Fog Color", Vector) = (1,1,1,1)
		_FogDistance ("Fog Distance", Float) = 1000
		_FogFade ("Fog Fade", Float) = 1
		_MediumTilingDistance ("Medium Tiling Distance", Float) = 500
		_LongTilingDistance ("Long Tiling Distance", Float) = 1500
		_DistanceTilingFade ("Distance Tiling Fade", Float) = 1
		_RefractionDistance ("Refraction Distance", Float) = 10
		_RefractionFalloff ("Refraction Falloff", Float) = 1
		[HideInInspector] _Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		GrabPass {
			"Refraction"
		}
		Pass {
			Name "FORWARD"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			Cull Off
			GpuProgramID 5034
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat9.xz = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat9.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat9.xz = u_xlat9.xz * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat9.xz);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.y = (-_FoamContrast) + 1.0;
					    u_xlat1.xy = u_xlat1.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat1.x = u_xlat1.x / u_xlat1.y;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec3 u_xlat12;
					bvec3 u_xlatb12;
					vec3 u_xlat13;
					bvec3 u_xlatb14;
					vec3 u_xlat15;
					float u_xlat16;
					vec3 u_xlat17;
					float u_xlat30;
					vec2 u_xlat31;
					float u_xlat32;
					vec2 u_xlat35;
					float u_xlat36;
					vec2 u_xlat37;
					vec2 u_xlat39;
					float u_xlat45;
					float u_xlat46;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					bool u_xlatb50;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat15.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat15.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15.xy = sqrt(u_xlat15.xy);
					    u_xlat1.x = float(1.0) / u_xlat15.x;
					    u_xlat1.y = float(1.0) / u_xlat15.y;
					    u_xlat15.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat15.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat4.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat31.xy = u_xlat5.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat6.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat7 = vec4(_SmallWavesSpeed) / u_xlat31.xyxy;
					    u_xlat17.x = u_xlat6.z * 0.00999999978;
					    u_xlat7 = u_xlat7 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat31.xy = u_xlat31.xy * u_xlat7.zw;
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat31.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat31.x);
					    u_xlat5 = u_xlat5 * u_xlat7;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat5.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat31.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat31.x = (-u_xlat31.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat31.x);
					    u_xlat9.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat31.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat31.x = sqrt(u_xlat31.x);
					    u_xlat5.xy = u_xlat31.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat9 = texture(_SmallWavesTexture, u_xlat5.zw);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat46 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat9.z = sqrt(u_xlat46);
					    u_xlat35.xy = u_xlat31.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat35.xy = log2(u_xlat35.xy);
					    u_xlat46 = u_xlat35.x * _DistanceTilingFade;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-u_xlat7.xyz) + u_xlat9.xyz;
					    u_xlat7.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat7.xyz;
					    u_xlat48 = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat48 = u_xlat48 * -0.5 + _SmallWaveRrefraction;
					    u_xlat49 = _SmallWaveRrefraction * 0.25 + (-u_xlat48);
					    u_xlat48 = u_xlat46 * u_xlat49 + u_xlat48;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = vec3(u_xlat48) * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat8 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat9.xy = u_xlat8.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat9.xyxy;
					    u_xlat10 = u_xlat10 * u_xlat17.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat9.xy = u_xlat9.xy * u_xlat10.zw;
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat9.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat9.z = sqrt(u_xlat48);
					    u_xlat8 = u_xlat8 * u_xlat10;
					    u_xlat8 = u_xlat8 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat10.z = sqrt(u_xlat48);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat48 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat48 = min(u_xlat48, 1.0);
					    u_xlat48 = (-u_xlat48) + 1.0;
					    u_xlat8.z = sqrt(u_xlat48);
					    u_xlat10.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat9.xyz = u_xlat5.xxx * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-u_xlat9.xyz);
					    u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat9.xy = u_xlat9.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat48 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat39.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat46) * u_xlat39.xy + u_xlat9.xy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat8.xyz = u_xlat9.xxx * u_xlat8.xyz + u_xlat7.wwz;
					    u_xlat10 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat37.xy = u_xlat10.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat11.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat37.xx;
					    u_xlat11.x = float(0.0);
					    u_xlat11.z = float(0.0);
					    u_xlat6.yw = u_xlat6.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat6 = u_xlat11 * u_xlat6 + vs_TEXCOORD0.xyxy;
					    u_xlat37.xy = u_xlat37.xy * u_xlat6.zw;
					    u_xlat11 = texture(_LargeWavesTexture, u_xlat37.xy);
					    u_xlat11.x = u_xlat11.w * u_xlat11.x;
					    u_xlat11.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat11.z = sqrt(u_xlat49);
					    u_xlat6 = u_xlat6 * u_xlat10;
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat6.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat10.z = sqrt(u_xlat49);
					    u_xlat6 = texture(_LargeWavesTexture, u_xlat6.zw);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat49 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat49 = min(u_xlat49, 1.0);
					    u_xlat49 = (-u_xlat49) + 1.0;
					    u_xlat6.z = sqrt(u_xlat49);
					    u_xlat9.xzw = (-u_xlat11.xyz) + u_xlat10.xyz;
					    u_xlat9.xzw = u_xlat5.xxx * u_xlat9.xzw + u_xlat11.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat9.xzw);
					    u_xlat6.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat9.xzw;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat8.w = 0.0;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz + u_xlat8.wwz;
					    u_xlat7.xy = u_xlat7.xy + u_xlat8.xy;
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6.w = 2.0;
					    u_xlat6.xyz = u_xlat6.xyw + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat6.yyy * vs_TEXCOORD4.xyz;
					    u_xlat7.xyz = u_xlat6.xxx * vs_TEXCOORD3.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat6.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat46 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat46 = inversesqrt(u_xlat46);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat46);
					    u_xlat46 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat46)) + (-u_xlat4.xyz);
					    u_xlat5.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat5.xz);
					    u_xlat46 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat46 = float(1.0) / u_xlat46;
					    u_xlat46 = u_xlat46 + (-_ProjectionParams.y);
					    u_xlat46 = max(u_xlat46, 0.0);
					    u_xlat49 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat49 = max(u_xlat49, 0.0);
					    u_xlat46 = u_xlat46 + (-u_xlat49);
					    u_xlat5.xz = vec2(u_xlat46) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat5.xz = clamp(u_xlat5.xz, 0.0, 1.0);
					    u_xlat49 = log2(u_xlat5.x);
					    u_xlat49 = u_xlat49 * _ShoreFade;
					    u_xlat49 = exp2(u_xlat49);
					    u_xlat5.x = u_xlat46 / _ShoreTransparency;
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat36 = u_xlat49 * u_xlat5.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat37.xy = vec2(u_xlat48) * u_xlat6.xy;
					    u_xlat37.xy = vec2(u_xlat36) * u_xlat37.xy;
					    u_xlat32 = u_xlat35.y * _RefractionFalloff;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = min(u_xlat32, 1.0);
					    u_xlat37.xy = vec2(u_xlat32) * (-u_xlat37.xy) + u_xlat37.xy;
					    u_xlat7.xy = u_xlat37.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat7.xy);
					    u_xlat32 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat8.xyz = vec3(u_xlat32) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat45) + u_xlat8.xyz;
					    u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * u_xlat3.xyz;
					    u_xlat45 = _Gloss * 10.0 + 1.0;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat32 = (-_Gloss) + 1.0;
					    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb48){
					        u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat48 = inversesqrt(u_xlat48);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat4.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					        u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat10;
					            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					            u_xlat10 = hlslcc_movcTemp;
					        }
					        u_xlat48 = min(u_xlat10.y, u_xlat10.x);
					        u_xlat48 = min(u_xlat10.z, u_xlat48);
					        u_xlat10.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat48) + u_xlat10.xyz;
					    } else {
					        u_xlat9.xyz = u_xlat4.xyz;
					    }
					    u_xlat48 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat48;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat9 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat32);
					    u_xlat48 = u_xlat9.w + -1.0;
					    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
					    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat48);
					    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb50){
					        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb50){
					            u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat50 = inversesqrt(u_xlat50);
					            u_xlat11.xyz = u_xlat4.xyz * vec3(u_xlat50);
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat11.xyz;
					            u_xlat13.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat13.xyz = u_xlat13.xyz / u_xlat11.xyz;
					            u_xlatb14.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat12;
					                hlslcc_movcTemp.x = (u_xlatb14.x) ? u_xlat12.x : u_xlat13.x;
					                hlslcc_movcTemp.y = (u_xlatb14.y) ? u_xlat12.y : u_xlat13.y;
					                hlslcc_movcTemp.z = (u_xlatb14.z) ? u_xlat12.z : u_xlat13.z;
					                u_xlat12 = hlslcc_movcTemp;
					            }
					            u_xlat50 = min(u_xlat12.y, u_xlat12.x);
					            u_xlat50 = min(u_xlat12.z, u_xlat50);
					            u_xlat12.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat50) + u_xlat12.xyz;
					        }
					        u_xlat11 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat32);
					        u_xlat32 = u_xlat11.w + -1.0;
					        u_xlat32 = unity_SpecCube1_HDR.w * u_xlat32 + 1.0;
					        u_xlat32 = u_xlat32 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat11.xyz * vec3(u_xlat32);
					        u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz + (-u_xlat4.xyz);
					        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat9.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat32 = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat45 = u_xlat45 * u_xlat32;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat8.xyz);
					    u_xlat15.x = _LightWrapping * 0.5;
					    u_xlat30 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + u_xlat15.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat15.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat46 = u_xlat46 * -0.5;
					    u_xlat32 = 10.0 / _Density;
					    u_xlat4.xyz = vec3(u_xlat32) * _MainColor.xyz;
					    u_xlat4.xyz = vec3(u_xlat46) / u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(_Fade);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat7.xyz * u_xlat4.xyz + _DeepWaterColor.xyz;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat6.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat6.xy = u_xlat6.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat6.xy;
					    u_xlat2.xz = u_xlat9.xy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat39.xy = u_xlat6.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat39.xy);
					    u_xlat17.xz = u_xlat9.xy * u_xlat17.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat6.xy * u_xlat17.xz;
					    u_xlat9 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat46 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat46) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat11 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat17.xz;
					    u_xlat2 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
					    u_xlat31.x = u_xlat31.x / _FoamDistFade;
					    u_xlat31.x = log2(u_xlat31.x);
					    u_xlat31.x = u_xlat31.x * _FoamDistFalloff;
					    u_xlat31.x = exp2(u_xlat31.x);
					    u_xlat31.x = min(u_xlat31.x, 1.0);
					    u_xlat2.xyz = (-u_xlat1.xyw) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat31.xxx * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat1.x = u_xlat1.x + (-_FoamContrast);
					    u_xlat16 = _FoamContrast * -2.0 + 1.0;
					    u_xlat1.x = u_xlat1.x / u_xlat16;
					    u_xlat1.xyz = u_xlat1.xxx * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat46 = (-u_xlat5.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat45 = (-u_xlat49) * u_xlat5.x + 0.200000003;
					    u_xlat45 = _UnderwaterMode * u_xlat45 + u_xlat36;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat45 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat45 = u_xlat45 * _ProjectionParams.z;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = u_xlat45 * unity_FogParams.x;
					    u_xlat45 = u_xlat45 * (-u_xlat45);
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat16.x = _LightWrapping * 0.5;
					    u_xlat16.x = max(u_xlat16.x, 0.0);
					    u_xlat3.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat43 = u_xlat43 * -0.5;
					    u_xlat30 = 10.0 / _Density;
					    u_xlat6.xyz = vec3(u_xlat30) * _MainColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) / u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(_Fade);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat6.xyz + _DeepWaterColor.xyz;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xz = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.xz = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat2.xz = u_xlat2.xz * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat8 = texture(_ReflectionTex, u_xlat2.xz);
					    u_xlat2.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat2.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat2.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat2.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat2.xz = u_xlat9.xy * vec2(u_xlat42) + u_xlat2.xz;
					    u_xlat37.xy = u_xlat5.xy * u_xlat2.xz;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.xz;
					    u_xlat12 = texture(_FoamTexture, u_xlat2.xz);
					    u_xlat1.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat1.xy);
					    u_xlat1.xyw = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat2.xzw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat42 = u_xlat29.x / _FoamDistFade;
					    u_xlat42 = log2(u_xlat42);
					    u_xlat42 = u_xlat42 * _FoamDistFalloff;
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat42 = min(u_xlat42, 1.0);
					    u_xlat2.xzw = (-u_xlat1.xyw) + u_xlat2.xzw;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat2.xzw + u_xlat1.xyw;
					    u_xlat42 = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat42 = u_xlat42 + (-_FoamContrast);
					    u_xlat1.x = _FoamContrast * -2.0 + 1.0;
					    u_xlat42 = u_xlat42 / u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat42) * _FoamColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(_FoamIntensity));
					    u_xlat42 = (-u_xlat4.z) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
					    u_xlat2.xzw = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(_ReflectionIntensity);
					    u_xlat2.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat2.xzw + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + (-u_xlat2.xzw);
					    u_xlat1.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat1.xyz + u_xlat2.xzw;
					    u_xlat2.xzw = (-u_xlat1.xyz) + _FogColor.xyz;
					    u_xlat2.xzw = u_xlat2.xzw * u_xlat4.yyy;
					    u_xlat1.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xzw + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat16.xxx * _LightColor0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat8.xz = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat8.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat8.xz = u_xlat8.xz * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat8.xz);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.y = (-_FoamContrast) + 1.0;
					    u_xlat14.xy = u_xlat14.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat14.x = u_xlat14.x / u_xlat14.y;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat8.xz = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat8.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat8.xz = u_xlat8.xz * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat8.xz);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.y = (-_FoamContrast) + 1.0;
					    u_xlat14.xy = u_xlat14.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat14.x = u_xlat14.x / u_xlat14.y;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat8.xz = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat8.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat8.xz = u_xlat8.xz * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat8.xz);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.y = (-_FoamContrast) + 1.0;
					    u_xlat14.xy = u_xlat14.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat14.x = u_xlat14.x / u_xlat14.y;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					bvec3 u_xlatb11;
					vec4 u_xlat12;
					bvec3 u_xlatb13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat28;
					vec2 u_xlat29;
					float u_xlat30;
					vec2 u_xlat32;
					float u_xlat33;
					vec2 u_xlat34;
					vec2 u_xlat36;
					vec2 u_xlat37;
					float u_xlat42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					bool u_xlatb46;
					float u_xlat47;
					bool u_xlatb47;
					void main()
					{
					    u_xlat0.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat1.x = unity_WorldToObject[0].x;
					    u_xlat1.y = unity_WorldToObject[1].x;
					    u_xlat1.z = unity_WorldToObject[2].x;
					    u_xlat14.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat14.y = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14.xy = sqrt(u_xlat14.xy);
					    u_xlat1.x = float(1.0) / u_xlat14.x;
					    u_xlat1.y = float(1.0) / u_xlat14.y;
					    u_xlat14.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * vs_TEXCOORD2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat29.xy = u_xlat4.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat6 = vec4(_SmallWavesSpeed) / u_xlat29.xyxy;
					    u_xlat42 = u_xlat5.z * 0.00999999978;
					    u_xlat6 = u_xlat6 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat29.xy = u_xlat29.xy * u_xlat6.zw;
					    u_xlat7 = texture(_SmallWavesTexture, u_xlat29.xy);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat29.x);
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat4 = u_xlat4 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat6 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat29.x = (-u_xlat29.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat29.x);
					    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat29.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat29.x = sqrt(u_xlat29.x);
					    u_xlat4.xy = u_xlat29.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat8 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat8.z = sqrt(u_xlat43);
					    u_xlat32.xy = u_xlat29.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat32.xy = log2(u_xlat32.xy);
					    u_xlat43 = u_xlat32.x * _DistanceTilingFade;
					    u_xlat43 = exp2(u_xlat43);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat6.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat6.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat16.x = u_xlat4.x * _SmallWaveRrefraction;
					    u_xlat16.x = u_xlat16.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat45 = _SmallWaveRrefraction * 0.25 + (-u_xlat16.x);
					    u_xlat16.x = u_xlat43 * u_xlat45 + u_xlat16.x;
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat7 = u_xlat1.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat8.xy = u_xlat7.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat9 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat8.xyxy;
					    u_xlat9 = u_xlat9 * vec4(u_xlat42) + vs_TEXCOORD0.xyxy;
					    u_xlat8.xy = u_xlat8.xy * u_xlat9.zw;
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat8.xy);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat8.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat8.z = sqrt(u_xlat16.x);
					    u_xlat7 = u_xlat7 * u_xlat9;
					    u_xlat7 = u_xlat7 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_MediumWavesTexture, u_xlat7.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat9.z = sqrt(u_xlat16.x);
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat7.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat16.x = min(u_xlat16.x, 1.0);
					    u_xlat16.x = (-u_xlat16.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat16.x);
					    u_xlat9.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
					    u_xlat8.xyz = u_xlat4.xxx * u_xlat9.xyz + u_xlat8.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat4.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat8.xy = u_xlat8.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat16.x = _MediumWaveRefraction * 0.0199999996;
					    u_xlat36.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat8.xy);
					    u_xlat8.xy = vec2(u_xlat43) * u_xlat36.xy + u_xlat8.xy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.wwz;
					    u_xlat9 = u_xlat1.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat34.xy = u_xlat9.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat34.xx;
					    u_xlat10.x = float(0.0);
					    u_xlat10.z = float(0.0);
					    u_xlat5.yw = u_xlat5.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat5 = u_xlat10 * u_xlat5 + vs_TEXCOORD0.xyxy;
					    u_xlat34.xy = u_xlat34.xy * u_xlat5.zw;
					    u_xlat10 = texture(_LargeWavesTexture, u_xlat34.xy);
					    u_xlat10.x = u_xlat10.w * u_xlat10.x;
					    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat10.z = sqrt(u_xlat45);
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat5 = u_xlat5 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat9 = texture(_LargeWavesTexture, u_xlat5.xy);
					    u_xlat9.x = u_xlat9.w * u_xlat9.x;
					    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat9.z = sqrt(u_xlat45);
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat5.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat45 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat45 = min(u_xlat45, 1.0);
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat5.z = sqrt(u_xlat45);
					    u_xlat8.xzw = (-u_xlat10.xyz) + u_xlat9.xyz;
					    u_xlat8.xzw = u_xlat4.xxx * u_xlat8.xzw + u_xlat10.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat8.xzw);
					    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz + u_xlat8.xzw;
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat7.w = 0.0;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + u_xlat7.wwz;
					    u_xlat6.xy = u_xlat6.xy + u_xlat7.xy;
					    u_xlat6.z = u_xlat5.z;
					    u_xlat5.w = 2.0;
					    u_xlat5.xyz = u_xlat5.xyw + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.yyy * vs_TEXCOORD4.xyz;
					    u_xlat6.xyz = u_xlat5.xxx * vs_TEXCOORD3.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat5.zzz * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat43 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat43);
					    u_xlat43 = dot((-u_xlat3.xyz), u_xlat0.xyz);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat6.xyz = u_xlat0.xyz * (-vec3(u_xlat43)) + (-u_xlat3.xyz);
					    u_xlat4.xz = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat4.xz);
					    u_xlat43 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat43 = float(1.0) / u_xlat43;
					    u_xlat43 = u_xlat43 + (-_ProjectionParams.y);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat45 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat43 = u_xlat43 + (-u_xlat45);
					    u_xlat4.xz = vec2(u_xlat43) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat4.xz = clamp(u_xlat4.xz, 0.0, 1.0);
					    u_xlat45 = log2(u_xlat4.x);
					    u_xlat45 = u_xlat45 * _ShoreFade;
					    u_xlat45 = exp2(u_xlat45);
					    u_xlat4.x = u_xlat43 / _ShoreTransparency;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat33 = u_xlat45 * u_xlat4.x;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat7.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat16.xy = u_xlat16.xx * u_xlat5.xy;
					    u_xlat16.xy = vec2(u_xlat33) * u_xlat16.xy;
					    u_xlat46 = u_xlat32.y * _RefractionFalloff;
					    u_xlat46 = exp2(u_xlat46);
					    u_xlat46 = min(u_xlat46, 1.0);
					    u_xlat16.xy = vec2(u_xlat46) * (-u_xlat16.xy) + u_xlat16.xy;
					    u_xlat16.xy = u_xlat16.xy + u_xlat7.xy;
					    u_xlat7 = texture(Refraction, u_xlat16.xy);
					    u_xlat16.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = _WorldSpaceLightPos0.xyz * u_xlat16.xxx + u_xlat3.xyz;
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz;
					    u_xlat16.x = _Gloss * 10.0 + 1.0;
					    u_xlat16.x = exp2(u_xlat16.x);
					    u_xlat30 = (-_Gloss) + 1.0;
					    u_xlatb46 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb46){
					        u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat46 = inversesqrt(u_xlat46);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat6.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat9;
					            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					            u_xlat9 = hlslcc_movcTemp;
					        }
					        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
					        u_xlat46 = min(u_xlat9.z, u_xlat46);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat46) + u_xlat9.xyz;
					    } else {
					        u_xlat8.xyz = u_xlat6.xyz;
					    }
					    u_xlat46 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat30 = u_xlat30 * u_xlat46;
					    u_xlat30 = u_xlat30 * 6.0;
					    u_xlat8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat30);
					    u_xlat46 = u_xlat8.w + -1.0;
					    u_xlat46 = unity_SpecCube0_HDR.w * u_xlat46 + 1.0;
					    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat8.xyz * vec3(u_xlat46);
					    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb47){
					        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb47){
					            u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat47 = inversesqrt(u_xlat47);
					            u_xlat10.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
					            u_xlat12.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
					            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
					            {
					                vec4 hlslcc_movcTemp = u_xlat11;
					                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
					                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
					                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
					                u_xlat11 = hlslcc_movcTemp;
					            }
					            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
					            u_xlat47 = min(u_xlat11.z, u_xlat47);
					            u_xlat11.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat6.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat30);
					        u_xlat30 = u_xlat6.w + -1.0;
					        u_xlat30 = unity_SpecCube1_HDR.w * u_xlat30 + 1.0;
					        u_xlat30 = u_xlat30 * unity_SpecCube1_HDR.x;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30);
					        u_xlat8.xyz = vec3(u_xlat46) * u_xlat8.xyz + (-u_xlat6.xyz);
					        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat6.xyz;
					    }
					    u_xlat6.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat16.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat8.xyz = u_xlat6.xyz * u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz + u_xlat8.xyz;
					    u_xlat0.x = _LightWrapping * 0.5;
					    u_xlat28 = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat0.x = u_xlat0.y * u_xlat28 + u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat6.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat14.x = u_xlat43 * -0.5;
					    u_xlat28 = 10.0 / _Density;
					    u_xlat8.xyz = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat8.xyz = u_xlat14.xxx / u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat8.xyz = log2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat8.xyz * vec3(_Fade);
					    u_xlat8.xyz = exp2(u_xlat8.xyz);
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat8.xyz + _DeepWaterColor.xyz;
					    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
					    u_xlat14.xy = u_xlat5.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat14.xy = u_xlat14.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat14.xy = u_xlat14.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat2 = texture(_ReflectionTex, u_xlat14.xy);
					    u_xlat14.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat5.x = dot(u_xlat14.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat14.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat14.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = u_xlat1.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat5.xy = u_xlat5.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat9.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat5.xy;
					    u_xlat14.xy = u_xlat9.xy * vec2(u_xlat42) + u_xlat14.xy;
					    u_xlat37.xy = u_xlat5.xy * u_xlat14.xy;
					    u_xlat10 = texture(_FoamTexture, u_xlat37.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(u_xlat42) + vs_TEXCOORD0.xy;
					    u_xlat5.xy = u_xlat5.xy * u_xlat9.xy;
					    u_xlat11 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat42 = _FoamTiling * 0.333333343;
					    u_xlat1.xy = vec2(u_xlat42) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat14.xy = u_xlat14.xy * u_xlat1.xy;
					    u_xlat12 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xy = u_xlat1.xy * u_xlat9.xy;
					    u_xlat9 = texture(_FoamTexture, u_xlat14.xy);
					    u_xlat14.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyw = (-u_xlat9.xyz) + u_xlat12.xyz;
					    u_xlat29.x = u_xlat29.x / _FoamDistFade;
					    u_xlat29.x = log2(u_xlat29.x);
					    u_xlat29.x = u_xlat29.x * _FoamDistFalloff;
					    u_xlat29.x = exp2(u_xlat29.x);
					    u_xlat29.x = min(u_xlat29.x, 1.0);
					    u_xlat1.xyw = (-u_xlat14.xyz) + u_xlat1.xyw;
					    u_xlat14.xyz = u_xlat29.xxx * u_xlat1.xyw + u_xlat14.xyz;
					    u_xlat14.x = dot(u_xlat14.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat14.x = u_xlat14.x + (-_FoamContrast);
					    u_xlat28 = _FoamContrast * -2.0 + 1.0;
					    u_xlat14.x = u_xlat14.x / u_xlat28;
					    u_xlat14.xyz = u_xlat14.xxx * _FoamColor.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * (-vec3(_FoamIntensity));
					    u_xlat1.x = (-u_xlat4.z) + 1.0;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat1.xxx;
					    u_xlat1.xyz = (-u_xlat8.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_ReflectionIntensity);
					    u_xlat1.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat14.xyz + (-u_xlat1.xyz);
					    u_xlat14.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat14.xyz) + _FogColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.yyy;
					    u_xlat14.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat42 = (-u_xlat45) * u_xlat4.x + 0.200000003;
					    u_xlat42 = _UnderwaterMode * u_xlat42 + u_xlat33;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat42 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.x;
					    u_xlat42 = u_xlat42 * (-u_xlat42);
					    u_xlat42 = exp2(u_xlat42);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One One, One One
			ZWrite Off
			Cull Off
			GpuProgramID 126593
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _TimeEditor;
						float _Gloss;
						float _SmallWaveRrefraction;
						float _Density;
						vec4 _MainColor;
						float _Fade;
						vec4 _DeepWaterColor;
						float _SmallWavesSpeed;
						float _SmallWavesTiling;
						vec4 _ReflectionTex_ST;
						float _ReflectionIntensity;
						float _EnableReflections;
						float _MediumWavesTiling;
						float _MediumWavesSpeed;
						float _MediumWaveRefraction;
						float _LargeWaveRefraction;
						float _LargeWavesTiling;
						float _LargeWavesSpeed;
						float _DepthTransparency;
						float _FoamBlend;
						vec4 _FoamColor;
						float _FoamIntensity;
						float _FoamContrast;
						float _FoamSpeed;
						float _FoamTiling;
						float _FoamDistFalloff;
						float _FoamDistFade;
						float _FoamVisibility;
						float _UnderwaterMode;
						float _ShoreFade;
						float _ShoreTransparency;
						float _LightWrapping;
						float _Specular;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _MediumTilingDistance;
						float _DistanceTilingFade;
						float _LongTilingDistance;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _MediumWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat9;
					float u_xlat10;
					float u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat18;
					vec2 u_xlat20;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat18.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat0.y = float(1.0) / u_xlat18.x;
					    u_xlat1 = u_xlat0.xyxy * vec4(vec4(_SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling, _SmallWavesTiling));
					    u_xlat18.xy = u_xlat1.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat2 = vec4(_SmallWavesSpeed) / u_xlat18.xyxy;
					    u_xlat3.xz = _TimeEditor.xx + _Time.xx;
					    u_xlat4.x = u_xlat3.z * 0.00999999978;
					    u_xlat2 = u_xlat2 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat18.xy = u_xlat18.xy * u_xlat2.zw;
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat18.xy);
					    u_xlat1 = u_xlat1 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat1.xy);
					    u_xlat1 = texture(_SmallWavesTexture, u_xlat1.zw);
					    u_xlat5.x = u_xlat5.w * u_xlat5.x;
					    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat5.z = sqrt(u_xlat18.x);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18.x = min(u_xlat18.x, 1.0);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18.x);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat5.xy = u_xlat18.xx / vec2(_MediumTilingDistance, _FogDistance);
					    u_xlat5.xy = log2(u_xlat5.xy);
					    u_xlat5.xy = u_xlat5.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat5.xy = min(u_xlat5.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat27 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat27 = min(u_xlat27, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat1.z = sqrt(u_xlat27);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat13.xy = u_xlat18.xx / vec2(_LongTilingDistance, _RefractionDistance);
					    u_xlat18.x = u_xlat18.x / _FoamDistFade;
					    u_xlat18.x = log2(u_xlat18.x);
					    u_xlat18.x = u_xlat18.x * _FoamDistFalloff;
					    u_xlat18.x = exp2(u_xlat18.x);
					    u_xlat13.xy = log2(u_xlat13.xy);
					    u_xlat27 = u_xlat13.x * _DistanceTilingFade;
					    u_xlat28 = u_xlat13.y * _RefractionFalloff;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = min(u_xlat28, 1.0);
					    u_xlat18.y = exp2(u_xlat27);
					    u_xlat18.xy = min(u_xlat18.xy, vec2(1.0, 1.0));
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.x = u_xlat5.x * _SmallWaveRrefraction;
					    u_xlat2.x = u_xlat2.x * -0.5 + _SmallWaveRrefraction;
					    u_xlat11 = _SmallWaveRrefraction * 0.25 + (-u_xlat2.x);
					    u_xlat2.x = u_xlat18.y * u_xlat11 + u_xlat2.x;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat6 = u_xlat0.xyxy * vec4(vec4(_MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling, _MediumWavesTiling));
					    u_xlat1.xy = u_xlat6.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7 = vec4(vec4(_MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed, _MediumWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat7 = u_xlat7 * u_xlat4.xxxx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat1.xy = u_xlat1.xy * u_xlat7.zw;
					    u_xlat7 = texture(_MediumWavesTexture, u_xlat1.xy);
					    u_xlat6 = u_xlat6 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat8 = texture(_MediumWavesTexture, u_xlat6.xy);
					    u_xlat6 = texture(_MediumWavesTexture, u_xlat6.zw);
					    u_xlat8.x = u_xlat8.w * u_xlat8.x;
					    u_xlat1.xy = u_xlat8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat13.x);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat13.x);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat6.x = u_xlat6.w * u_xlat6.x;
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat13.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat13.x = min(u_xlat13.x, 1.0);
					    u_xlat13.x = (-u_xlat13.x) + 1.0;
					    u_xlat6.z = sqrt(u_xlat13.x);
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat18.yyy * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.w = 0.0;
					    u_xlat13.xy = u_xlat5.xx * vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat13.xy = u_xlat13.xy * vec2(-0.5, -0.5) + vec2(_MediumWaveRefraction, _LargeWaveRefraction);
					    u_xlat23.xy = vec2(_MediumWaveRefraction, _LargeWaveRefraction) * vec2(0.25, 0.25) + (-u_xlat13.xy);
					    u_xlat13.xy = u_xlat18.yy * u_xlat23.xy + u_xlat13.xy;
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat1.xyz + u_xlat2.wwz;
					    u_xlat1.xy = u_xlat2.xy + u_xlat6.xy;
					    u_xlat2 = u_xlat0.xyxy * vec4(vec4(_LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling, _LargeWavesTiling));
					    u_xlat13.xz = u_xlat2.zw * vec2(0.00100000005, 0.00100000005);
					    u_xlat7.yw = vec2(vec2(_LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat13.xx;
					    u_xlat3.yw = u_xlat3.zz * vec2(0.00999999978, 0.00999999978);
					    u_xlat7.x = float(0.0);
					    u_xlat7.z = float(0.0);
					    u_xlat3 = u_xlat7 * u_xlat3 + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xy = u_xlat13.xz * u_xlat3.zw;
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat2 = u_xlat2 * vec4(5.00000024e-05, 5.00000024e-05, 1.66666687e-05, 1.66666687e-05);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat2.xy);
					    u_xlat2 = texture(_LargeWavesTexture, u_xlat2.zw);
					    u_xlat7.x = u_xlat7.w * u_xlat7.x;
					    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat7.z = sqrt(u_xlat20.x);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat20.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat20.x = min(u_xlat20.x, 1.0);
					    u_xlat20.x = (-u_xlat20.x) + 1.0;
					    u_xlat3.z = sqrt(u_xlat20.x);
					    u_xlat7.xyz = (-u_xlat3.xyz) + u_xlat7.xyz;
					    u_xlat3.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat2.z = sqrt(u_xlat29);
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat18.yyy * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat6.w = 0.0;
					    u_xlat2.xyz = u_xlat13.yyy * u_xlat2.xyz + u_xlat6.wwz;
					    u_xlat1.z = u_xlat2.z;
					    u_xlat2.w = 2.0;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat2.w = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.xy = u_xlat1.xy * vec2(_Distortion) + u_xlat2.xw;
					    u_xlat2.z = u_xlat2.w * (-_ProjectionParams.x);
					    u_xlat2.xy = u_xlat2.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat20.xy = u_xlat20.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat3 = texture(_ReflectionTex, u_xlat20.xy);
					    u_xlat27 = _MediumWaveRefraction * 0.0199999996;
					    u_xlat20.xy = vec2(u_xlat27) * u_xlat1.xy;
					    u_xlat13.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat6 = texture(_CameraDepthTexture, u_xlat13.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_ProjectionParams.y);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat30 = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat27 = u_xlat27 + (-u_xlat30);
					    u_xlat13.xy = vec2(u_xlat27) / vec2(_DepthTransparency, _FoamBlend);
					    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
					    u_xlat30 = log2(u_xlat13.x);
					    u_xlat13.x = (-u_xlat13.y) + 1.0;
					    u_xlat30 = u_xlat30 * _ShoreFade;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat22.x = u_xlat27 / _ShoreTransparency;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * -0.5;
					    u_xlat31 = u_xlat30 * u_xlat22.x;
					    u_xlat30 = (-u_xlat30) * u_xlat22.x + 0.200000003;
					    u_xlat30 = _UnderwaterMode * u_xlat30 + u_xlat31;
					    u_xlat20.xy = u_xlat20.xy * vec2(u_xlat31);
					    u_xlat20.xy = vec2(u_xlat28) * (-u_xlat20.xy) + u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy + u_xlat2.xy;
					    u_xlat2 = texture(Refraction, u_xlat2.xy);
					    u_xlat28 = 10.0 / _Density;
					    u_xlat5.xzw = vec3(u_xlat28) * _MainColor.xyz;
					    u_xlat5.xzw = vec3(u_xlat27) / u_xlat5.xzw;
					    u_xlat5.xzw = u_xlat5.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xzw = clamp(u_xlat5.xzw, 0.0, 1.0);
					    u_xlat5.xzw = log2(u_xlat5.xzw);
					    u_xlat5.xzw = u_xlat5.xzw * vec3(_Fade);
					    u_xlat5.xzw = exp2(u_xlat5.xzw);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xzw + _DeepWaterColor.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionIntensity);
					    u_xlat2.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat27 = _FoamTiling * 0.333333343;
					    u_xlat3.xy = vec2(u_xlat27) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat22.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xz = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.x = dot(u_xlat5.xz, vec2(-3.61999014e-06, 1.0));
					    u_xlat6.y = dot(u_xlat5.xz, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xz = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat5.xz = u_xlat22.xy * u_xlat4.xx + u_xlat5.xz;
					    u_xlat4.xz = u_xlat22.xy * u_xlat4.xx + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat3.xy * u_xlat5.xz;
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.xz;
					    u_xlat4.xz = u_xlat0.xy * u_xlat4.xz;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xz;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat8 = texture(_FoamTexture, u_xlat4.xz);
					    u_xlat0.xyw = u_xlat7.xyz + (-u_xlat8.xyz);
					    u_xlat7 = texture(_FoamTexture, u_xlat3.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat6.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyw) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat18.xxx * u_xlat3.xyz + u_xlat0.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat9 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat9;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(_FoamIntensity));
					    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(vec3(_FoamVisibility, _FoamVisibility, _FoamVisibility)) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;
					    u_xlat27 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * u_xlat2.xyz + u_xlat1.xyw;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat10 = _Gloss * 10.0 + 1.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * vec3(vec3(_Specular, _Specular, _Specular));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat28 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + u_xlat28;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			Cull Off
			Offset 1, 1
			GpuProgramID 153474
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
	}
	Fallback "JS Games/Diffuse"
}