Shader "AQUAS/Desktop and Web/One-Sided/Double-Textured" {
	Properties {
		[NoScaleOffset] _SmallWavesTexture ("Small Waves Texture", 2D) = "white" {}
		[NoScaleOffset] _LargeWavesTexture ("Large Waves Texture", 2D) = "white" {}
		_SmallWavesTiling ("Small Waves Tiling", Float) = 0.5
		_LargeWavesTiling ("Large Waves Tiling", Float) = 0.2
		_OffsetSmallBigSmall ("Offset (Small/Big+Small)", Range(0, 1)) = 1
		_OffsetSmallBigSmallBig ("Offset (Small/Big+Small/Big)", Range(0, 1)) = 0
		_MainColor ("Main Color", Vector) = (0,0.4627451,1,1)
		_DeepWaterColor ("Deep Water Color", Vector) = (0,0.3411765,0.6235294,1)
		_Fade ("Fade", Float) = 1.45
		_Density ("Density", Range(0, 10)) = 1.74
		_DepthTransparency ("Depth Transparency", Float) = 1.5
		_ShoreFade ("Shore Fade", Float) = 0.3
		_ShoreTransparency ("Shore Transparency", Float) = 0.04
		[HideInInspector] _ReflectionTex ("Reflection Tex", 2D) = "white" {}
		[MaterialToggle] _EnableReflections ("Enable Reflections", Float) = 0
		_ReflectionIntensity ("Reflection Intensity", Range(0, 1)) = 0.6
		_Distortion ("Distortion", Range(0, 2)) = 0.3
		_Specular ("Specular", Float) = 1
		_SpecularColor ("Specular Color", Vector) = (0.7205882,0.7258866,0.7258866,1)
		_Gloss ("Gloss", Float) = 0.7
		_LightWrapping ("Light Wrapping", Float) = 2
		_Refraction ("Refraction", Range(0, 1)) = 0.67
		_SmallWavesSpeed ("Small Waves Speed", Float) = 20
		_LargeWavesSpeed ("Large Waves Speed", Float) = 40
		[NoScaleOffset] _FoamTexture ("Foam Texture", 2D) = "white" {}
		_FoamTiling ("Foam Tiling", Float) = 3
		_FoamBlend ("Foam Blend", Float) = 0.15
		_FoamVisibility ("Foam Visibility", Range(0, 1)) = 0.3
		_FoamIntensity ("Foam Intensity", Float) = 10
		_FoamContrast ("Foam Contrast", Range(0, 0.5)) = 0.25
		_FoamColor ("Foam Color", Vector) = (0.3529412,0.3529412,0.3529412,1)
		_FoamSpeed ("Foam Speed", Float) = 120
		_FoamDistFade ("Foam Dist. Fade", Float) = 14.7
		_FoamDistFalloff ("Foam Dist. Falloff", Float) = 4.7
		[MaterialToggle] _EnableCustomFog ("Enable Custom Fog", Float) = 3.114187
		_FogColor ("Fog Color", Vector) = (1,1,1,1)
		_FogDistance ("Fog Distance", Float) = 1000
		_FogFade ("Fog Fade", Float) = 1
		_LongTilingDistance ("Long Tiling Distance", Float) = 200
		_DistanceTilingFade ("Distance Tiling Fade", Float) = 1
		_RefractionDistance ("Refraction Distance", Float) = 10
		_RefractionFalloff ("Refraction Falloff", Float) = 1
		[HideInInspector] _Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		GrabPass {
			"Refraction"
		}
		Pass {
			Name "FORWARD"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			GpuProgramID 37701
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 glstate_lightmodel_ambient;
						vec4 unused_4_1[22];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat7.xyz = (-u_xlat5.xyz) + u_xlat4.xzw;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xzw) + u_xlat5.xyz;
					    u_xlat4.xzw = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat5.xyz + u_xlat4.xzw;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat21.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat5.xy = u_xlat21.xy * vec2(u_xlat16) + u_xlat5.xy;
					    u_xlat21.xy = u_xlat21.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat21.xy;
					    u_xlat21.xy = u_xlat0.xy * u_xlat21.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat7 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat0.xyz = (-u_xlat5.xyz) + u_xlat7.xyz;
					    u_xlat5 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat6 = texture(_FoamTexture, u_xlat6.xy);
					    u_xlat5.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.y = (-_FoamContrast) + 1.0;
					    u_xlat0.xy = u_xlat0.xy + (-vec2(vec2(_FoamContrast, _FoamContrast)));
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat4.xzw);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat4.xzw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 119182
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat10;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * in_TANGENT0.www;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    vs_TEXCOORD4.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD5 = u_xlat0;
					    u_xlat10 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat10 = unity_MatrixV[0].z * u_xlat1.x + u_xlat10;
					    u_xlat10 = unity_MatrixV[2].z * u_xlat1.z + u_xlat10;
					    u_xlat10 = unity_MatrixV[3].z * u_xlat1.w + u_xlat10;
					    vs_TEXCOORD6.z = (-u_xlat10);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat0.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD9;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD9 = u_xlat2.z;
					    vs_TEXCOORD1 = u_xlat0;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD3.xyz = u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.zxy * u_xlat4.yzx;
					    u_xlat3.xyz = u_xlat3.yzx * u_xlat4.zxy + (-u_xlat5.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * in_TANGENT0.www;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat7 = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat1.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat7;
					    u_xlat1.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat1.x;
					    vs_TEXCOORD6.z = (-u_xlat1.x);
					    u_xlat1.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out float vs_TEXCOORD9;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    u_xlat3.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat3.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat3.xy;
					    vs_TEXCOORD1 = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD9 = u_xlat2.z;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat3.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat3.zxy + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD5 = u_xlat2;
					    u_xlat0.x = u_xlat1.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
					    vs_TEXCOORD6.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD6.w = u_xlat2.w;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "FOG_EXP2" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD9;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 _TimeEditor;
						float _Fade;
						vec4 _MainColor;
						float _Density;
						vec4 _DeepWaterColor;
						float _ReflectionIntensity;
						float _EnableReflections;
						vec4 _ReflectionTex_ST;
						float _FoamBlend;
						float _FoamIntensity;
						vec4 _FoamColor;
						float _FoamVisibility;
						float _FoamContrast;
						float _FoamTiling;
						float _FoamSpeed;
						float _Specular;
						float _Gloss;
						float _Refraction;
						float _LightWrapping;
						float _SmallWavesTiling;
						float _SmallWavesSpeed;
						float _LargeWavesSpeed;
						float _LargeWavesTiling;
						float _OffsetSmallBigSmallBig;
						float _OffsetSmallBigSmall;
						float _FoamDistFade;
						float _FoamDistFalloff;
						float _DepthTransparency;
						vec4 _SpecularColor;
						float _ShoreFade;
						float _ShoreTransparency;
						float _Distortion;
						float _EnableCustomFog;
						vec4 _FogColor;
						float _FogDistance;
						float _FogFade;
						float _LongTilingDistance;
						float _DistanceTilingFade;
						float _RefractionDistance;
						float _RefractionFalloff;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4;
						vec4 _ZBufferParams;
						vec4 unused_1_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[4];
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _SmallWavesTexture;
					uniform  sampler2D _LargeWavesTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D Refraction;
					uniform  sampler2D _ReflectionTex;
					uniform  sampler2D _FoamTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  float vs_TEXCOORD9;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat21;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = unity_WorldToObject[0].x;
					    u_xlat0.y = unity_WorldToObject[1].x;
					    u_xlat0.z = unity_WorldToObject[2].x;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.x = unity_WorldToObject[0].z;
					    u_xlat1.y = unity_WorldToObject[1].z;
					    u_xlat1.z = unity_WorldToObject[2].z;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat0.y = float(1.0) / u_xlat16;
					    u_xlat1 = u_xlat0.xyxy * vec4(_SmallWavesTiling, _SmallWavesTiling, _LargeWavesTiling, _LargeWavesTiling);
					    u_xlat2 = u_xlat1.xyxy * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat1 = u_xlat1.zwzw * vec4(0.00100000005, 0.00100000005, 0.000100000005, 0.000100000005);
					    u_xlat3 = vec4(vec4(_SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed, _SmallWavesSpeed)) / u_xlat2.xyxy;
					    u_xlat16 = _TimeEditor.x + _Time.x;
					    u_xlat16 = u_xlat16 * 0.00999999978;
					    u_xlat4 = u_xlat3 * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat2 * u_xlat4;
					    u_xlat5 = texture(_SmallWavesTexture, u_xlat4.zw);
					    u_xlat4 = texture(_SmallWavesTexture, u_xlat4.xy);
					    u_xlat6.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat7.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat7.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat7 = u_xlat7.xyxy + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat3 = u_xlat3 * vec4(u_xlat16) + u_xlat7;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_SmallWavesTexture, u_xlat2.zw);
					    u_xlat2 = texture(_SmallWavesTexture, u_xlat2.xy);
					    u_xlat2.xyz = (-u_xlat4.xyz) + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat3.xyz;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat4.xy = vec2(u_xlat24) / vec2(_LongTilingDistance, _FogDistance);
					    u_xlat4.xy = log2(u_xlat4.xy);
					    u_xlat4.xy = u_xlat4.xy * vec2(_DistanceTilingFade, _FogFade);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat4.xy = min(u_xlat4.xy, vec2(1.0, 1.0));
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3 = vec4(vec4(_LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed, _LargeWavesSpeed)) / u_xlat1.xyxy;
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat5 = u_xlat3 * vec4(u_xlat16) + u_xlat5.xyxy;
					    u_xlat3 = u_xlat3.zwzw * vec4(u_xlat16) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = u_xlat1 * u_xlat3;
					    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = u_xlat1 * u_xlat5;
					    u_xlat5 = texture(_LargeWavesTexture, u_xlat1.zw);
					    u_xlat1 = texture(_LargeWavesTexture, u_xlat1.xy);
					    u_xlat7 = texture(_LargeWavesTexture, u_xlat3.zw);
					    u_xlat3 = texture(_LargeWavesTexture, u_xlat3.xy);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
					    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_OffsetSmallBigSmall, _OffsetSmallBigSmall, _OffsetSmallBigSmall)) * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat1.xyz = vec3(_OffsetSmallBigSmallBig) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3.w = u_xlat3.y * _ProjectionParams.x;
					    u_xlat18.xy = u_xlat1.xy * vec2(vec2(_Distortion, _Distortion)) + u_xlat3.xw;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.z = u_xlat3.w * (-_ProjectionParams.x);
					    u_xlat3.xy = u_xlat3.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat18.xy = u_xlat18.xy * _ReflectionTex_ST.xy + _ReflectionTex_ST.zw;
					    u_xlat5 = texture(_ReflectionTex, u_xlat18.xy);
					    u_xlat25 = u_xlat24 / _RefractionDistance;
					    u_xlat24 = u_xlat24 / _FoamDistFade;
					    u_xlat24 = log2(u_xlat24);
					    u_xlat24 = u_xlat24 * _FoamDistFalloff;
					    u_xlat24 = exp2(u_xlat24);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * _RefractionFalloff;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = min(u_xlat25, 1.0);
					    u_xlat18.x = u_xlat4.x * _Refraction;
					    u_xlat18.x = u_xlat18.x * -0.75 + _Refraction;
					    u_xlat26 = u_xlat18.x * 0.200000003;
					    u_xlat1.xyz = u_xlat18.xxx * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat18.xy);
					    u_xlat18.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat18.x = float(1.0) / u_xlat18.x;
					    u_xlat18.x = u_xlat18.x + (-_ProjectionParams.y);
					    u_xlat18.y = vs_TEXCOORD6.z + (-_ProjectionParams.y);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.x = (-u_xlat18.y) + u_xlat18.x;
					    u_xlat26 = u_xlat18.x / _DepthTransparency;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * _ShoreFade;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat19 = u_xlat18.x / _ShoreTransparency;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat19;
					    u_xlat2.xy = vec2(u_xlat26) * u_xlat2.xy;
					    u_xlat2.xy = vec2(u_xlat25) * (-u_xlat2.xy) + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
					    u_xlat3 = texture(Refraction, u_xlat2.xy);
					    u_xlat25 = u_xlat18.x * -0.5;
					    u_xlat2.x = u_xlat18.x / _FoamBlend;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat10.x = 10.0 / _Density;
					    u_xlat4.xzw = u_xlat10.xxx * _MainColor.xyz;
					    u_xlat4.xzw = vec3(u_xlat25) / u_xlat4.xzw;
					    u_xlat4.xzw = u_xlat4.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xzw = clamp(u_xlat4.xzw, 0.0, 1.0);
					    u_xlat4.xzw = log2(u_xlat4.xzw);
					    u_xlat4.xzw = u_xlat4.xzw * vec3(_Fade);
					    u_xlat4.xzw = exp2(u_xlat4.xzw);
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xzw + _DeepWaterColor.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat4.xzw = (-u_xlat5.xyz) + u_xlat3.xyz;
					    u_xlat25 = (-_ReflectionIntensity) + 1.0;
					    u_xlat4.xzw = vec3(u_xlat25) * u_xlat4.xzw + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat3.xyz) + u_xlat4.xzw;
					    u_xlat3.xyz = vec3(vec3(_EnableReflections, _EnableReflections, _EnableReflections)) * u_xlat4.xzw + u_xlat3.xyz;
					    u_xlat25 = _FoamTiling * 0.333333343;
					    u_xlat10.xy = u_xlat0.xy * vec2(u_xlat25);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_FoamTiling, _FoamTiling));
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat10.xy = u_xlat10.xy * vec2(0.00100000005, 0.00100000005);
					    u_xlat5.x = dot(u_xlat6.xy, vec2(-3.61999014e-06, 1.0));
					    u_xlat5.y = dot(u_xlat6.xy, vec2(-1.0, -3.61999014e-06));
					    u_xlat4.xz = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat5.xy = vec2(vec2(_FoamSpeed, _FoamSpeed)) / u_xlat0.xy;
					    u_xlat4.xz = u_xlat5.xy * vec2(u_xlat16) + u_xlat4.xz;
					    u_xlat5.xy = u_xlat5.xy * vec2(u_xlat16) + vs_TEXCOORD0.xy;
					    u_xlat21.xy = u_xlat10.xy * u_xlat4.xz;
					    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
					    u_xlat5.xy = u_xlat0.xy * u_xlat5.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xz;
					    u_xlat6 = texture(_FoamTexture, u_xlat0.xy);
					    u_xlat7 = texture(_FoamTexture, u_xlat5.xy);
					    u_xlat0.xyz = u_xlat6.xyz + (-u_xlat7.xyz);
					    u_xlat6 = texture(_FoamTexture, u_xlat10.xy);
					    u_xlat5 = texture(_FoamTexture, u_xlat21.xy);
					    u_xlat4.xzw = (-u_xlat6.xyz) + u_xlat5.xyz;
					    u_xlat4.xzw = (-u_xlat0.xyz) + u_xlat4.xzw;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xzw + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
					    u_xlat0.x = u_xlat0.x + (-_FoamContrast);
					    u_xlat8 = _FoamContrast * -2.0 + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat0.xyz = u_xlat0.xxx * _FoamColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(vec3(_FoamIntensity, _FoamIntensity, _FoamIntensity)));
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FoamVisibility) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _FogColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.yyy;
					    u_xlat0.xyz = vec3(vec3(_EnableCustomFog, _EnableCustomFog, _EnableCustomFog)) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * vs_TEXCOORD3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.zzz * vs_TEXCOORD2.xyz + u_xlat1.xyw;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat9 = _Gloss * 10.0 + 1.0;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(_Specular) * _SpecularColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat25 = _LightWrapping * 0.5;
					    u_xlat2.x = (-_LightWrapping) * 0.5 + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat2.x + u_xlat25;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat26) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD9 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "JS Games/Diffuse"
}